// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/resolver/local/resolver.go

// Package local is a generated GoMock package.
package local

import (
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResolver is a mock of Resolver interface.
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
}

// MockResolverMockRecorder is the mock recorder for MockResolver.
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance.
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// ResolveDestination mocks base method.
func (m *MockResolver) ResolveDestination(dest string) (net.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveDestination", dest)
	ret0, _ := ret[0].(net.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveDestination indicates an expected call of ResolveDestination.
func (mr *MockResolverMockRecorder) ResolveDestination(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveDestination", reflect.TypeOf((*MockResolver)(nil).ResolveDestination), dest)
}

// ResolveSource mocks base method.
func (m *MockResolver) ResolveSource() (net.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveSource")
	ret0, _ := ret[0].(net.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveSource indicates an expected call of ResolveSource.
func (mr *MockResolverMockRecorder) ResolveSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveSource", reflect.TypeOf((*MockResolver)(nil).ResolveSource))
}
